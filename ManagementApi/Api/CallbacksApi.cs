/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Clinically.Kinde.Authentication.ManagementApi.Client;
using Clinically.Kinde.Authentication.ManagementApi.Model;

namespace Clinically.Kinde.Authentication.ManagementApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse AddLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Add Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> AddLogoutRedirectURLsWithHttpInfo(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);
        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse AddRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> AddRedirectCallbackURLsWithHttpInfo(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);
        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteCallbackURLs(string appId, string urls);

        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteCallbackURLsWithHttpInfo(string appId, string urls);
        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse DeleteLogoutURLs(string appId, string urls);

        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> DeleteLogoutURLsWithHttpInfo(string appId, string urls);
        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>RedirectCallbackUrls</returns>
        RedirectCallbackUrls GetCallbackURLs(string appId);

        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>ApiResponse of RedirectCallbackUrls</returns>
        ApiResponse<RedirectCallbackUrls> GetCallbackURLsWithHttpInfo(string appId);
        /// <summary>
        /// List Logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>LogoutRedirectUrls</returns>
        LogoutRedirectUrls GetLogoutURLs(string appId);

        /// <summary>
        /// List Logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>ApiResponse of LogoutRedirectUrls</returns>
        ApiResponse<LogoutRedirectUrls> GetLogoutURLsWithHttpInfo(string appId);
        /// <summary>
        /// Replace Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse ReplaceLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);

        /// <summary>
        /// Replace Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> ReplaceLogoutRedirectURLsWithHttpInfo(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest);
        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse ReplaceRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);

        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> ReplaceRedirectCallbackURLsWithHttpInfo(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> AddLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Add additional logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddLogoutRedirectURLsWithHttpInfoAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> AddRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Add additional redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddRedirectCallbackURLsWithHttpInfoAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteCallbackURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Callback URLs
        /// </summary>
        /// <remarks>
        /// Delete callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteCallbackURLsWithHttpInfoAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> DeleteLogoutURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Logout URLs
        /// </summary>
        /// <remarks>
        /// Delete logout URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteLogoutURLsWithHttpInfoAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedirectCallbackUrls</returns>
        System.Threading.Tasks.Task<RedirectCallbackUrls> GetCallbackURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Callback URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedirectCallbackUrls)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedirectCallbackUrls>> GetCallbackURLsWithHttpInfoAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutRedirectUrls</returns>
        System.Threading.Tasks.Task<LogoutRedirectUrls> GetLogoutURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Logout URLs
        /// </summary>
        /// <remarks>
        /// Returns an application&#39;s logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutRedirectUrls)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogoutRedirectUrls>> GetLogoutURLsWithHttpInfoAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> ReplaceLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Logout Redirect URLs
        /// </summary>
        /// <remarks>
        /// Replace all logout redirect URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceLogoutRedirectURLsWithHttpInfoAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> ReplaceRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Redirect Callback URLs
        /// </summary>
        /// <remarks>
        /// Replace all redirect callback URLs. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceRedirectCallbackURLsWithHttpInfoAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallbacksApi : ICallbacksApiSync, ICallbacksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallbacksApi : IDisposable, ICallbacksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public CallbacksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CallbacksApi(string basePath)
        {
            this.Configuration = ManagementApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CallbacksApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ManagementApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallbacksApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallbacksApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ManagementApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CallbacksApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ManagementApi.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallbacksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CallbacksApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ManagementApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Logout Redirect URLs Add additional logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse AddLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            ApiResponse<SuccessResponse> localVarResponse = AddLogoutRedirectURLsWithHttpInfo(appId, replaceLogoutRedirectURLsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Logout Redirect URLs Add additional logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> AddLogoutRedirectURLsWithHttpInfo(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->AddLogoutRedirectURLs");

            // verify the required parameter 'replaceLogoutRedirectURLsRequest' is set
            if (replaceLogoutRedirectURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceLogoutRedirectURLsRequest' when calling CallbacksApi->AddLogoutRedirectURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceLogoutRedirectURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLogoutRedirectURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Logout Redirect URLs Add additional logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> AddLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await AddLogoutRedirectURLsWithHttpInfoAsync(appId, replaceLogoutRedirectURLsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Logout Redirect URLs Add additional logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddLogoutRedirectURLsWithHttpInfoAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->AddLogoutRedirectURLs");

            // verify the required parameter 'replaceLogoutRedirectURLsRequest' is set
            if (replaceLogoutRedirectURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceLogoutRedirectURLsRequest' when calling CallbacksApi->AddLogoutRedirectURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceLogoutRedirectURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLogoutRedirectURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse AddRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            ApiResponse<SuccessResponse> localVarResponse = AddRedirectCallbackURLsWithHttpInfo(appId, replaceRedirectCallbackURLsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> AddRedirectCallbackURLsWithHttpInfo(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->AddRedirectCallbackURLs");

            // verify the required parameter 'replaceRedirectCallbackURLsRequest' is set
            if (replaceRedirectCallbackURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceRedirectCallbackURLsRequest' when calling CallbacksApi->AddRedirectCallbackURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceRedirectCallbackURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRedirectCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> AddRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await AddRedirectCallbackURLsWithHttpInfoAsync(appId, replaceRedirectCallbackURLsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Redirect Callback URLs Add additional redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> AddRedirectCallbackURLsWithHttpInfoAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->AddRedirectCallbackURLs");

            // verify the required parameter 'replaceRedirectCallbackURLsRequest' is set
            if (replaceRedirectCallbackURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceRedirectCallbackURLsRequest' when calling CallbacksApi->AddRedirectCallbackURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceRedirectCallbackURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddRedirectCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Callback URLs Delete callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteCallbackURLs(string appId, string urls)
        {
            ApiResponse<SuccessResponse> localVarResponse = DeleteCallbackURLsWithHttpInfo(appId, urls);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Callback URLs Delete callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> DeleteCallbackURLsWithHttpInfo(string appId, string urls)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->DeleteCallbackURLs");

            // verify the required parameter 'urls' is set
            if (urls == null)
                throw new ApiException(400, "Missing required parameter 'urls' when calling CallbacksApi->DeleteCallbackURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "urls", urls));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Callback URLs Delete callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteCallbackURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await DeleteCallbackURLsWithHttpInfoAsync(appId, urls, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Callback URLs Delete callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteCallbackURLsWithHttpInfoAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->DeleteCallbackURLs");

            // verify the required parameter 'urls' is set
            if (urls == null)
                throw new ApiException(400, "Missing required parameter 'urls' when calling CallbacksApi->DeleteCallbackURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "urls", urls));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Logout URLs Delete logout URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse DeleteLogoutURLs(string appId, string urls)
        {
            ApiResponse<SuccessResponse> localVarResponse = DeleteLogoutURLsWithHttpInfo(appId, urls);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Logout URLs Delete logout URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> DeleteLogoutURLsWithHttpInfo(string appId, string urls)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->DeleteLogoutURLs");

            // verify the required parameter 'urls' is set
            if (urls == null)
                throw new ApiException(400, "Missing required parameter 'urls' when calling CallbacksApi->DeleteLogoutURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "urls", urls));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLogoutURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Logout URLs Delete logout URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> DeleteLogoutURLsAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await DeleteLogoutURLsWithHttpInfoAsync(appId, urls, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Logout URLs Delete logout URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="urls">Urls to delete, comma separated and url encoded.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> DeleteLogoutURLsWithHttpInfoAsync(string appId, string urls, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->DeleteLogoutURLs");

            // verify the required parameter 'urls' is set
            if (urls == null)
                throw new ApiException(400, "Missing required parameter 'urls' when calling CallbacksApi->DeleteLogoutURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "urls", urls));

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLogoutURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>RedirectCallbackUrls</returns>
        public RedirectCallbackUrls GetCallbackURLs(string appId)
        {
            ApiResponse<RedirectCallbackUrls> localVarResponse = GetCallbackURLsWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>ApiResponse of RedirectCallbackUrls</returns>
        public ApiResponse<RedirectCallbackUrls> GetCallbackURLsWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->GetCallbackURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RedirectCallbackUrls>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedirectCallbackUrls</returns>
        public async System.Threading.Tasks.Task<RedirectCallbackUrls> GetCallbackURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<RedirectCallbackUrls> localVarResponse = await GetCallbackURLsWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Callback URLs Returns an application&#39;s redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedirectCallbackUrls)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RedirectCallbackUrls>> GetCallbackURLsWithHttpInfoAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->GetCallbackURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RedirectCallbackUrls>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Logout URLs Returns an application&#39;s logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>LogoutRedirectUrls</returns>
        public LogoutRedirectUrls GetLogoutURLs(string appId)
        {
            ApiResponse<LogoutRedirectUrls> localVarResponse = GetLogoutURLsWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Logout URLs Returns an application&#39;s logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <returns>ApiResponse of LogoutRedirectUrls</returns>
        public ApiResponse<LogoutRedirectUrls> GetLogoutURLsWithHttpInfo(string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->GetLogoutURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LogoutRedirectUrls>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoutURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Logout URLs Returns an application&#39;s logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LogoutRedirectUrls</returns>
        public async System.Threading.Tasks.Task<LogoutRedirectUrls> GetLogoutURLsAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<LogoutRedirectUrls> localVarResponse = await GetLogoutURLsWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Logout URLs Returns an application&#39;s logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LogoutRedirectUrls)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogoutRedirectUrls>> GetLogoutURLsWithHttpInfoAsync(string appId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->GetLogoutURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LogoutRedirectUrls>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoutURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Logout Redirect URLs Replace all logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse ReplaceLogoutRedirectURLs(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            ApiResponse<SuccessResponse> localVarResponse = ReplaceLogoutRedirectURLsWithHttpInfo(appId, replaceLogoutRedirectURLsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Logout Redirect URLs Replace all logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> ReplaceLogoutRedirectURLsWithHttpInfo(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->ReplaceLogoutRedirectURLs");

            // verify the required parameter 'replaceLogoutRedirectURLsRequest' is set
            if (replaceLogoutRedirectURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceLogoutRedirectURLsRequest' when calling CallbacksApi->ReplaceLogoutRedirectURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceLogoutRedirectURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceLogoutRedirectURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Logout Redirect URLs Replace all logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> ReplaceLogoutRedirectURLsAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await ReplaceLogoutRedirectURLsWithHttpInfoAsync(appId, replaceLogoutRedirectURLsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Logout Redirect URLs Replace all logout redirect URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceLogoutRedirectURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceLogoutRedirectURLsWithHttpInfoAsync(string appId, ReplaceLogoutRedirectURLsRequest replaceLogoutRedirectURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->ReplaceLogoutRedirectURLs");

            // verify the required parameter 'replaceLogoutRedirectURLsRequest' is set
            if (replaceLogoutRedirectURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceLogoutRedirectURLsRequest' when calling CallbacksApi->ReplaceLogoutRedirectURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceLogoutRedirectURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_logout_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceLogoutRedirectURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse ReplaceRedirectCallbackURLs(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            ApiResponse<SuccessResponse> localVarResponse = ReplaceRedirectCallbackURLsWithHttpInfo(appId, replaceRedirectCallbackURLsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse<SuccessResponse> ReplaceRedirectCallbackURLsWithHttpInfo(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->ReplaceRedirectCallbackURLs");

            // verify the required parameter 'replaceRedirectCallbackURLsRequest' is set
            if (replaceRedirectCallbackURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceRedirectCallbackURLsRequest' when calling CallbacksApi->ReplaceRedirectCallbackURLs");

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceRedirectCallbackURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceRedirectCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> ReplaceRedirectCallbackURLsAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResponse> localVarResponse = await ReplaceRedirectCallbackURLsWithHttpInfoAsync(appId, replaceRedirectCallbackURLsRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Redirect Callback URLs Replace all redirect callback URLs. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The identifier for the application.</param>
        /// <param name="replaceRedirectCallbackURLsRequest">Callback details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> ReplaceRedirectCallbackURLsWithHttpInfoAsync(string appId, ReplaceRedirectCallbackURLsRequest replaceRedirectCallbackURLsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling CallbacksApi->ReplaceRedirectCallbackURLs");

            // verify the required parameter 'replaceRedirectCallbackURLsRequest' is set
            if (replaceRedirectCallbackURLsRequest == null)
                throw new ApiException(400, "Missing required parameter 'replaceRedirectCallbackURLsRequest' when calling CallbacksApi->ReplaceRedirectCallbackURLs");


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; charset=utf-8"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("app_id", ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = replaceRedirectCallbackURLsRequest;

            // authentication (kindeBearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessResponse>("/api/v1/applications/{app_id}/auth_redirect_urls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceRedirectCallbackURLs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
