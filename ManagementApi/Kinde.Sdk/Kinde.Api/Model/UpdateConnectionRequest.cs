/*
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Kinde.Api.Client.FileParameter;
using OpenAPIDateConverter = Kinde.Api.Client.OpenAPIDateConverter;

namespace Kinde.Api.Model
{
    /// <summary>
    /// UpdateConnectionRequest
    /// </summary>
    [DataContract(Name = "UpdateConnection_request")]
    public partial class UpdateConnectionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConnectionRequest" /> class.
        /// </summary>
        /// <param name="name">The internal name of the connection..</param>
        /// <param name="displayName">The public facing name of the connection..</param>
        /// <param name="enabledApplications">Client IDs of applications in which this connection is to be enabled..</param>
        /// <param name="options">The connection&#39;s options (varies by strategy)..</param>
        public UpdateConnectionRequest(string name = default(string), string displayName = default(string), List<string> enabledApplications = default(List<string>), Object options = default(Object))
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.EnabledApplications = enabledApplications;
            this.Options = options;
        }

        /// <summary>
        /// The internal name of the connection.
        /// </summary>
        /// <value>The internal name of the connection.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The public facing name of the connection.
        /// </summary>
        /// <value>The public facing name of the connection.</value>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Client IDs of applications in which this connection is to be enabled.
        /// </summary>
        /// <value>Client IDs of applications in which this connection is to be enabled.</value>
        [DataMember(Name = "enabled_applications", EmitDefaultValue = false)]
        public List<string> EnabledApplications { get; set; }

        /// <summary>
        /// The connection&#39;s options (varies by strategy).
        /// </summary>
        /// <value>The connection&#39;s options (varies by strategy).</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Object Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConnectionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EnabledApplications: ").Append(EnabledApplications).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
